.container

-# %h3= @ipBreakDown[0].data
-# - @ipBreakDown[0].data.each {|k,v| @bar << "#{v}"}
-# -# %h3= @Gip[0].data.each {|k,v| "#{k} is #{v}"}
-# %ul
-#   - @ipBreakDown[0].data.each do |k,v|
-#     %li= "#{k} is #{v}"
-# %p= @var
-# %p= @var.class

:javascript

  var Detector = function() {
      // a font will be compared against all the three default fonts.
      // and if it doesn't match all 3 then that font is not available.
      var baseFonts = ['monospace', 'sans-serif', 'serif'];

      //we use m or w because these two characters take up the maximum width.
      // And we use a LLi so that the same matching fonts can get separated
      var testString = "mmmmmmmmmmlli";

      //we test using 72px font size, we may use any size. I guess larger the better.
      var testSize = '72px';

      var h = document.getElementsByTagName("body")[0];

      // create a SPAN in the document to get the width of the text we use to test
      var s = document.createElement("span");
      s.style.fontSize = testSize;
      s.innerHTML = testString;
      var defaultWidth = {};
      var defaultHeight = {};
      for (var index in baseFonts) {
          //get the default width for the three base fonts
          s.style.fontFamily = baseFonts[index];
          h.appendChild(s);
          defaultWidth[baseFonts[index]] = s.offsetWidth; //width for the default font
          defaultHeight[baseFonts[index]] = s.offsetHeight; //height for the defualt font
          h.removeChild(s);
      }

      function detect(font) {
          var detected = false;
          for (var index in baseFonts) {
              s.style.fontFamily = font + ',' + baseFonts[index]; // name of the font along with the base font for fallback.
              h.appendChild(s);
              var matched = (s.offsetWidth != defaultWidth[baseFonts[index]] || s.offsetHeight != defaultHeight[baseFonts[index]]);
              h.removeChild(s);
              detected = detected || matched;
          }
          return detected;
      }

      this.detect = detect;
  };

  // ************************************************************************

  function identify_plugins(){
  // fetch and serialize plugins
  var plugins = "";
  // in Mozilla and in fact most non-IE browsers, this is easy
  if (navigator.plugins) {
    var np = navigator.plugins;
    var plist = new Array();
    // sorting navigator.plugins is a right royal pain
    // but it seems to be necessary because their order
    // is non-constant in some browsers
    for (var i = 0; i < np.length; i++) {
      plist[i] = np[i].name + "; ";
      plist[i] += np[i].description + "; ";
      plist[i] += np[i].filename + ";";
      for (var n = 0; n < np[i].length; n++) {
        plist[i] += " (" + np[i][n].description +"; "+ np[i][n].type +
                   "; "+ np[i][n].suffixes + ")";
      }
      plist[i] += ". ";
    }
    plist.sort();
    for (i = 0; i < np.length; i++)
      plugins+= "Plugin "+i+": " + plist[i];
    }
    // in IE, things are much harder; we use PluginDetect to get less
    // information (only the plugins listed below & their version numbers)
    if (plugins == "") {
      var pp = new Array();
      pp[0] = "Java"; pp[1] = "QuickTime"; pp[2] = "DevalVR"; pp[3] = "Shockwave";
      pp[4] = "Flash"; pp[5] = "WindowsMediaplayer"; pp[6] = "Silverlight";
      pp[7] = "VLC";
      var version;
      for ( p in pp ) {
        version = PluginDetect.getVersion(pp[p]);
        if (version)
          plugins += pp[p] + " " + version + "; "
      }
      plugins += ieAcrobatVersion();
    }
    return plugins;
  }
  var browserPlugins = identify_plugins();
  // ************************************************************************

%h3 plugins
%p
  :javascript
    document.write(browserPlugins);
%h3 fonts
%p
  :javascript

    // var fontList = ["cursive", "Arial", "default", "Century", "flooooop"]
    var fontList = ["Al Bayan","Al Nile","Al Tarikh","American Typewriter","Andale Mono","Apple Braille","Apple Chancery","Apple Color Emoji","Apple SD Gothic Neo","Apple Symbols","AppleGothic","AppleMyungjo","Arial","Arial Black","Arial Hebrew","Arial Hebrew Scholar","Arial Narrow","Arial Rounded MT Bold","Arial Unicode MS","Athelas","Avenir","Avenir Next","Avenir Next Condensed","Ayuthaya","Baghdad","Bangla MN","Bangla Sangam MN","Baoli SC","Baskerville","Beirut","Big Caslon","Bodoni 72","Bodoni 72 Oldstyle","Bodoni 72 Smallcaps","Bodoni Ornaments","Bradley Hand","Brush Script MT","Chalkboard","Chalkboard SE","Chalkduster","Charter","Cochin","Comic Sans MS","Copperplate","Corsiva Hebrew","Courier","Courier New","Damascus","DecoType Naskh","Devanagari MT","Devanagari Sangam MN","Didot","DIN Alternate","DIN Condensed","Diwan Kufi","Diwan Thuluth","Euphemia UCAS","Farah","Farisi","Futura","GB18030 Bitmap","Geeza Pro","Geneva","Georgia","Gill Sans","Gujarati MT","Gujarati Sangam MN","GungSeo","Gurmukhi MN","Gurmukhi MT","Gurmukhi Sangam MN","Hannotate SC","Hannotate TC","HanziPen SC","HanziPen TC","HeadLineA","Heiti SC","Heiti TC","Helvetica","Helvetica Neue","Herculanum","Hiragino Kaku Gothic Pro","Hiragino Kaku Gothic ProN","Hiragino Kaku Gothic Std","Hiragino Kaku Gothic StdN","Hiragino Maru Gothic Pro","Hiragino Maru Gothic ProN","Hiragino Mincho Pro","Hiragino Mincho ProN","Hiragino Sans GB","Hoefler Text","Impact","InaiMathi","Iowan Old Style","ITF Devanagari","Kailasa","Kaiti SC","Kaiti TC","Kannada MN","Kannada Sangam MN","Kefa","Khmer MN","Khmer Sangam MN","Kohinoor Devanagari","Kokonor","Krungthep","KufiStandardGK","Lantinghei SC","Lantinghei TC","Lao MN","Lao Sangam MN","Libian SC","LiHei Pro","LiSong Pro","Lucida Grande","Luminari","Malayalam MN","Malayalam Sangam MN","Marion","Marker Felt","Menlo","Microsoft Sans Serif","Mishafi","Mishafi Gold","Monaco","Mshtakan","Muna","Myanmar MN","Myanmar Sangam MN","Nadeem","Nanum Brush Script","Nanum Gothic","Nanum Myeongjo","Nanum Pen Script","New Peninim MT","Noteworthy","Optima","Oriya MN","Oriya Sangam MN","Osaka","Palatino","Papyrus","PCMyungjo","Phosphate","PilGi","Plantagenet Cherokee","PT Mono","PT Sans","PT Sans Caption","PT Sans Narrow","PT Serif","PT Serif Caption","Raanana","Sana","Sathu","Savoye LET","Seravek","Shree Devanagari 714","SignPainter","Silom","Sinhala MN","Sinhala Sangam MN","Skia","Snell Roundhand","Songti SC","Songti TC","STFangsong","STHeiti","STIXGeneral","STIXIntegralsD","STIXIntegralsSm","STIXIntegralsUp","STIXIntegralsUpD","STIXIntegralsUpSm","STIXNonUnicode","STIXSizeFiveSym","STIXSizeFourSym","STIXSizeOneSym","STIXSizeThreeSym","STIXSizeTwoSym","STIXVariants","STKaiti","STSong","Sukhumvit Set","Superclarendon","Symbol","Tahoma","Tamil MN","Tamil Sangam MN","Telugu MN","Telugu Sangam MN","Thonburi","Times","Times New Roman","Trattatello","Trebuchet MS","Verdana","Waseem","Wawati SC","Wawati TC","Webdings","Weibei SC","Weibei TC","Wingdings","Wingdings 2","Wingdings 3","Xingkai SC","Yuanti SC","YuGothic","YuMincho","Yuppy SC","Yuppy TC","Zapf Dingbats","Zapfino"]

    var detective = new Detector();
    var fontDict = new Array();

    for(var i in fontList) {
      if (detective.detect(fontList[i]) == false) {
        // fontDict.push(1)
        fontDict.push(fontList[i] + " false")
      } else {
        // fontDict.push(0)
        fontDict.push(fontList[i] + " true")
      }
    }

    for (var i = 0; i < fontDict.length; i++) {
      document.write(fontDict[i] + "; ");
    }
