.splash-page {

  display: none;

  .splash-title {
    margin-top: 18%;
    font-size: 60px;

    @media (max-width: 1000px) {
      font-size: 30px;
    }
  }
}

@import 'mixins.css.scss';

.grid {
  min-height: 100%;
  width: 100%;
  height: auto;
  position: static;
  top: 0;
  left: 0;
  z-index: -2;

  // functions to set line size to avoid overflow and overlap
  // **************************************************************************
  $setValues: ();

  @function setVerticalLeft() {

  }

  @function setHorizontalTop() {

  }
  // **************************************************************************

  // vertical lines
  .line {
    position: absolute;
    border-left: solid 3px rgb(238, 238, 238);

    @for $i from 1 through 50 {
      &:nth-child(#{$i}) {
        height: random(700px) + 100;
        left: random(100%);
        top: random(300px) + 60;

        // $seconds: random(25s) + 10;
        // @include animate (backgroundFadeTwo $seconds infinite)
      }
    }
  }

  // horizontal lines
  .lineh {
    position: absolute;
    border-bottom: solid 3px rgb(238, 238, 238);

    @for $i from 1 through 50 {
      &:nth-child(#{$i}) {
        width: random(1000px) + 200;
        left: random(800px);
        top: random(600px) + 60;
        // $seconds: random(25s) + 10;
        // @include animate (backgroundFadeTwo $seconds infinite)
      }
    }
  }

  // functions for checking box margins to avoid overflow and overlap
  // **************************************************************************
  $setValues: ();

  @function scanOverlap($value) {

    // if list is empty append value and return
    @if length($setValues) == 0 {
      $setValues: append($setValues, $value);
      @return $value;
    }
    // otherwise loop through existing measurements
    @for $i from 1 through length($setValues) {
      // if it's similar
      @if ($value > nth($setValues,$i)-5) and ($value < nth($setValues, $i)+5) {
        // then reset value
        $direction: random(501);
        @if $direction < 250 {
          $value: $value + 5;
        } @else {
          $value: $value - 5;
        }
        // would have been cool to call recursively and ensure no overlap but browser can't handle it
          // $value: random(100%);
          // $value: scanOverlap($value);
        @return $value;
      } @else {
        // otherwise populate list with new value
        $setValues: append($setValues, $value);
        @return $value;
      }
    }
  }

  @function checkBoxHorizontalMargins($margin) {

    @if $margin < 5% {
      $margin: random(5%) + 5;
      @return $margin;
    } @else if $margin > 95% {
      $margin: random(5%) + 91;
      @return $margin;
    } @else {
      @return $margin;
    }

  }

  @function checkBoxVerticalMargins($margin) {

    @if $margin < 10% {
      $margin: random(10%) + 10;
      @return $margin;
    } @else if $margin > 90% {
      $margin: random(10%) + 80;
      @return $margin;
    } @else {
      @return $margin;
    }

  }
  // **************************************************************************

  $boxSizes: 20 20 20 20 20 30 30 30;

  .box {
    position: absolute;
    background-color: rgb(103, 175, 233);
    z-index: -1;

    @for $i from 1 through 30 {
      &:nth-child(#{$i}) {
        $size: nth($boxSizes, random(8)+1);
        width: $size + px;
        height: $size + px;
        @include borderRadius(5px);

        // set left and right margins
        $left: random(100%);
        $left: scanOverlap($left);
        left: checkBoxHorizontalMargins($left);
        // empty list for next value setting
        $setValues: ();

        // set top and bottom margin
        $top: random(100%);
        $top: scanOverlap($top);
        top: checkBoxVerticalMargins($top);
        // empty list for next value setting
        $setValues: ();

        // set fade animation and timing
        $seconds: random(20s) + 10;
        @include animate (boxFade $seconds infinite)
      }
    }
  }
}

// fade animation
// ****************************************************************************

@include keyframes(boxFade) {
  0%   { opacity:  0;}
  40%  { opacity:  0.1;}
  50%  { opacity:  1;}
  60%  { opacity:  0.1;}
  100% { opacity:  0;}
}

// Fade dark to light
@include keyframes(backgroundFade) {
  0%   { opacity: 1; }
  50%  { opacity: 0.1; }
  100% { opacity: 1; }
}


// Fade light to dark
@include keyframes(backgroundFadeTwo) {
  0%   { opacity: 0.0; }
  40%   { opacity: 0.0; }
  50%  { opacity: 1; }
  60%   { opacity: 0.0; }
  100% { opacity: 0.0; }
}


// Fade mid to light to dark to mid
@include keyframes(backgroundFadeThree) {
  0%   { opacity: 0.5; }
  25%  { opacity: 0.1; }
  50%  { opacity: 0.5; }
  75%  { opacity: 1; }
  100% { opacity: 0.5; }
}
